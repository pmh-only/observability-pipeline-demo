apiVersion: apps/v1
kind: Deployment
metadata:
  name:  myapp
  namespace: default
  labels:
    app:  myapp
spec:
  selector:
    matchLabels:
      app: myapp
  replicas: 16
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  myapp
    spec:
      terminationGracePeriodSeconds: 45
      readinessGates:
        - conditionType: target-health.alb.ingress.k8s.aws/myapp_myapp_80
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: myapp
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: myapp
      nodeSelector:
        dedicated: app
      tolerations:
        - key: dedicated
          value: app
      containers:
      - name:  myapp
        image: nginx:alpine-slim
        lifecycle:
          preStop:
            exec:
              command: ['/bin/sleep', '30']
        volumeMounts:
          - mountPath: /usr/share/nginx/html
            name: cm
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        ports:
        - containerPort:  80
          name:  myapp
      restartPolicy: Always
      volumes:
        - name: cm
          configMap:
            name: myapp
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: myapp
  namespace: default
data:
  index.html: |-
    Hello, world!
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: default
spec:
  selector:
    app: myapp
  type: ClusterIP
  ports:
  - name: myapp
    protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp
  namespace: default
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "5"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "2"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    alb.ingress.kubernetes.io/target-group-attributes: deregistration_delay.timeout_seconds=30
    alb.ingress.kubernetes.io/load-balancer-attributes: >
      deletion_protection.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=myapp-bucket-813298391823,
      access_logs.s3.prefix=accesslog,
      connection_logs.s3.enabled=true,
      connection_logs.s3.bucket=myapp-bucket-813298391823,
      connection_logs.s3.prefix=conenctionlog
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myapp
            port:
              number: 80
